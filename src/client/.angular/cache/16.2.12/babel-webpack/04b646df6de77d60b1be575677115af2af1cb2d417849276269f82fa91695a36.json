{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/estado.service\";\nimport * as i2 from \"@angular/forms\";\nexport class EstadoComponent {\n  constructor(estadoService, fb) {\n    this.estadoService = estadoService;\n    this.fb = fb;\n    this.estado = [];\n    this.estadoForm = this.fb.group({\n      _id: [''],\n      nombrePais: [\"\", Validators.required],\n      nombreEstado: [\"\", Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.cargarEstado();\n  }\n  cargarEstado() {\n    this.estadoService.getEstado().subscribe(data => {\n      this.estado = data;\n    }, error => {\n      console.error('Error al cargar datos Personales:', error);\n    });\n  }\n  agregarEstado() {\n    if (this.estadoForm.valid) {\n      this.estadoService.addEstado(this.estadoForm.value).subscribe(() => {\n        this.cargarEstado();\n        this.estadoForm.reset();\n      }, error => {\n        console.error('Error al agregar Datos Personales:', error);\n      });\n    }\n  }\n  actualizarPais() {\n    if (this.estadoForm.valid) {\n      this.estadoService.updateEstado(this.estadoForm.value).subscribe(() => {\n        this.cargarEstado();\n        this.estadoForm.reset();\n      }, error => {\n        console.error('Error al actualizar Datos Personales:', error);\n      });\n    }\n  }\n  eliminarEstado(id) {\n    if (id) {\n      this.estadoService.deleteEstado(id).subscribe(data => {\n        console.log('Estado eliminado:', data);\n        this.cargarEstado();\n      }, error => {\n        console.error('Error al eliminar Estado:', error);\n      });\n    }\n  }\n  editarEstado(estado) {\n    this.estadoForm.patchValue(estado);\n  }\n  static #_ = this.ɵfac = function EstadoComponent_Factory(t) {\n    return new (t || EstadoComponent)(i0.ɵɵdirectiveInject(i1.EstadoService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EstadoComponent,\n    selectors: [[\"app-estado\"]],\n    decls: 2,\n    vars: 0,\n    template: function EstadoComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"estado works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","EstadoComponent","constructor","estadoService","fb","estado","estadoForm","group","_id","nombrePais","required","nombreEstado","ngOnInit","cargarEstado","getEstado","subscribe","data","error","console","agregarEstado","valid","addEstado","value","reset","actualizarPais","updateEstado","eliminarEstado","id","deleteEstado","log","editarEstado","patchValue","_","i0","ɵɵdirectiveInject","i1","EstadoService","i2","FormBuilder","_2","selectors","decls","vars","template","EstadoComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\Lexag\\Desktop\\minsaitAngular\\src\\client\\src\\app\\components\\estado\\estado.component.ts","C:\\Users\\Lexag\\Desktop\\minsaitAngular\\src\\client\\src\\app\\components\\estado\\estado.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { EstadoModel } from 'src/app/models/estadoModel';\nimport { EstadoService } from 'src/app/services/estado.service';\n@Component({\n  selector: 'app-estado',\n  templateUrl: './estado.component.html',\n  styleUrls: ['./estado.component.css']\n})\nexport class EstadoComponent implements OnInit {\n  estado: EstadoModel[] = [];\n  estadoForm: FormGroup;\n\n  constructor(private estadoService: EstadoService, private fb: FormBuilder) {\n    this.estadoForm = this.fb.group({\n      _id: [''],\n      nombrePais: [\"\", Validators.required],\n      nombreEstado: [\"\", Validators.required],\n    });\n  }\n\n  ngOnInit() {\n    this.cargarEstado();\n  }\n\n  cargarEstado() {\n    this.estadoService.getEstado().subscribe(\n      data => {\n        this.estado = data;\n      },\n      error => {\n        console.error('Error al cargar datos Personales:', error);\n      }\n    );\n  }\n\n  agregarEstado() {\n    if (this.estadoForm.valid) {\n      this.estadoService.addEstado(this.estadoForm.value).subscribe(\n        () => {\n          this.cargarEstado();\n          this.estadoForm.reset();\n        },\n        error => {\n          console.error('Error al agregar Datos Personales:', error);\n        }\n      );\n    }\n  }\n\n  actualizarPais() {\n    if (this.estadoForm.valid) {\n      this.estadoService.updateEstado(this.estadoForm.value).subscribe(\n        () => {\n          this.cargarEstado();\n          this.estadoForm.reset();\n        },\n        error => {\n          console.error('Error al actualizar Datos Personales:', error);\n        }\n      );\n    }\n  }\n\n  eliminarEstado(id: string | undefined) {\n    if (id) {\n      this.estadoService.deleteEstado(id).subscribe(\n        data => {\n          console.log('Estado eliminado:', data);\n          this.cargarEstado();\n        },\n        error => {\n          console.error('Error al eliminar Estado:', error);\n        }\n      );\n    }\n  }\n\n  editarEstado(estado: EstadoModel) {\n    this.estadoForm.patchValue(estado);\n  }\n}\n","<p>estado works!</p>\n"],"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;AAQnE,OAAM,MAAOC,eAAe;EAI1BC,YAAoBC,aAA4B,EAAUC,EAAe;IAArD,KAAAD,aAAa,GAAbA,aAAa;IAAyB,KAAAC,EAAE,GAAFA,EAAE;IAH5D,KAAAC,MAAM,GAAkB,EAAE;IAIxB,IAAI,CAACC,UAAU,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MAC9BC,GAAG,EAAE,CAAC,EAAE,CAAC;MACTC,UAAU,EAAE,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MACrCC,YAAY,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACU,QAAQ;KACvC,CAAC;EACJ;EAEAE,QAAQA,CAAA;IACN,IAAI,CAACC,YAAY,EAAE;EACrB;EAEAA,YAAYA,CAAA;IACV,IAAI,CAACV,aAAa,CAACW,SAAS,EAAE,CAACC,SAAS,CACtCC,IAAI,IAAG;MACL,IAAI,CAACX,MAAM,GAAGW,IAAI;IACpB,CAAC,EACDC,KAAK,IAAG;MACNC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAC3D,CAAC,CACF;EACH;EAEAE,aAAaA,CAAA;IACX,IAAI,IAAI,CAACb,UAAU,CAACc,KAAK,EAAE;MACzB,IAAI,CAACjB,aAAa,CAACkB,SAAS,CAAC,IAAI,CAACf,UAAU,CAACgB,KAAK,CAAC,CAACP,SAAS,CAC3D,MAAK;QACH,IAAI,CAACF,YAAY,EAAE;QACnB,IAAI,CAACP,UAAU,CAACiB,KAAK,EAAE;MACzB,CAAC,EACDN,KAAK,IAAG;QACNC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC5D,CAAC,CACF;;EAEL;EAEAO,cAAcA,CAAA;IACZ,IAAI,IAAI,CAAClB,UAAU,CAACc,KAAK,EAAE;MACzB,IAAI,CAACjB,aAAa,CAACsB,YAAY,CAAC,IAAI,CAACnB,UAAU,CAACgB,KAAK,CAAC,CAACP,SAAS,CAC9D,MAAK;QACH,IAAI,CAACF,YAAY,EAAE;QACnB,IAAI,CAACP,UAAU,CAACiB,KAAK,EAAE;MACzB,CAAC,EACDN,KAAK,IAAG;QACNC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC/D,CAAC,CACF;;EAEL;EAEAS,cAAcA,CAACC,EAAsB;IACnC,IAAIA,EAAE,EAAE;MACN,IAAI,CAACxB,aAAa,CAACyB,YAAY,CAACD,EAAE,CAAC,CAACZ,SAAS,CAC3CC,IAAI,IAAG;QACLE,OAAO,CAACW,GAAG,CAAC,mBAAmB,EAAEb,IAAI,CAAC;QACtC,IAAI,CAACH,YAAY,EAAE;MACrB,CAAC,EACDI,KAAK,IAAG;QACNC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD,CAAC,CACF;;EAEL;EAEAa,YAAYA,CAACzB,MAAmB;IAC9B,IAAI,CAACC,UAAU,CAACyB,UAAU,CAAC1B,MAAM,CAAC;EACpC;EAAC,QAAA2B,CAAA,G;qBAvEU/B,eAAe,EAAAgC,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,aAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAftC,eAAe;IAAAuC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,yBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCT5BZ,EAAA,CAAAc,cAAA,QAAG;QAAAd,EAAA,CAAAe,MAAA,oBAAa;QAAAf,EAAA,CAAAgB,YAAA,EAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}