{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/plantillaCv.service\";\nexport class PlantillaCvComponent {\n  constructor(plantillaCvService) {\n    this.plantillaCvService = plantillaCvService;\n    this.datosP = {};\n    this.perfil = {};\n  }\n  ngOnInit() {\n    this.obtenerDatos();\n  }\n  obtenerDatos() {\n    this.plantillaCvService.getDatosP().subscribe(data => {\n      this.datosP = data[0]; // Obtener el primer elemento del array\n    }, error => {\n      console.error('Error al obtener datosP:', error);\n    });\n    this.plantillaCvService.getPerfil().subscribe(data => {\n      this.perfil = data[0]; // Obtener el primer elemento del array\n    }, error => {\n      console.error('Error al obtener perfil:', error);\n    });\n  }\n  static #_ = this.ɵfac = function PlantillaCvComponent_Factory(t) {\n    return new (t || PlantillaCvComponent)(i0.ɵɵdirectiveInject(i1.PlantillaCvService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PlantillaCvComponent,\n    selectors: [[\"app-plantilla-cv\"]],\n    decls: 2,\n    vars: 0,\n    template: function PlantillaCvComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"plantilla-cv works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["PlantillaCvComponent","constructor","plantillaCvService","datosP","perfil","ngOnInit","obtenerDatos","getDatosP","subscribe","data","error","console","getPerfil","_","i0","ɵɵdirectiveInject","i1","PlantillaCvService","_2","selectors","decls","vars","template","PlantillaCvComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\Lexag\\Desktop\\minsaitAngularV2\\src\\client\\src\\app\\components\\plantilla-cv\\plantilla-cv.component.ts","C:\\Users\\Lexag\\Desktop\\minsaitAngularV2\\src\\client\\src\\app\\components\\plantilla-cv\\plantilla-cv.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { DatosPModel } from 'src/app/models/datosPModel';\r\nimport { DatosCvModel, PerfilCvModel } from 'src/app/models/plantillaCvModel';\r\nimport { PlantillaCvService } from 'src/app/services/plantillaCv.service';\r\n\r\n@Component({\r\n  selector: 'app-plantilla-cv',\r\n  templateUrl: './plantilla-cv.component.html',\r\n  styleUrls: ['./plantilla-cv.component.css']\r\n})\r\nexport class PlantillaCvComponent implements OnInit {\r\n\r\n  datosP: DatosCvModel = {} as DatosCvModel;\r\n  perfil: PerfilCvModel = {} as PerfilCvModel;\r\n\r\n  constructor(private plantillaCvService: PlantillaCvService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.obtenerDatos();\r\n  }\r\n\r\n  obtenerDatos() {\r\n    this.plantillaCvService.getDatosP().subscribe(\r\n      (data: DatosCvModel[]) => {\r\n        this.datosP = data[0]; // Obtener el primer elemento del array\r\n      },\r\n      error => {\r\n        console.error('Error al obtener datosP:', error);\r\n      }\r\n    );\r\n\r\n    this.plantillaCvService.getPerfil().subscribe(\r\n      (data: PerfilCvModel[]) => {\r\n        this.perfil = data[0]; // Obtener el primer elemento del array\r\n      },\r\n      error => {\r\n        console.error('Error al obtener perfil:', error);\r\n      }\r\n    );\r\n  }\r\n}\r\n","<p>plantilla-cv works!</p>\r\n"],"mappings":";;AAUA,OAAM,MAAOA,oBAAoB;EAK/BC,YAAoBC,kBAAsC;IAAtC,KAAAA,kBAAkB,GAAlBA,kBAAkB;IAHtC,KAAAC,MAAM,GAAiB,EAAkB;IACzC,KAAAC,MAAM,GAAkB,EAAmB;EAEmB;EAE9DC,QAAQA,CAAA;IACN,IAAI,CAACC,YAAY,EAAE;EACrB;EAEAA,YAAYA,CAAA;IACV,IAAI,CAACJ,kBAAkB,CAACK,SAAS,EAAE,CAACC,SAAS,CAC1CC,IAAoB,IAAI;MACvB,IAAI,CAACN,MAAM,GAAGM,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC,EACDC,KAAK,IAAG;MACNC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD,CAAC,CACF;IAED,IAAI,CAACR,kBAAkB,CAACU,SAAS,EAAE,CAACJ,SAAS,CAC1CC,IAAqB,IAAI;MACxB,IAAI,CAACL,MAAM,GAAGK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC,EACDC,KAAK,IAAG;MACNC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD,CAAC,CACF;EACH;EAAC,QAAAG,CAAA,G;qBA7BUb,oBAAoB,EAAAc,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,kBAAA;EAAA;EAAA,QAAAC,EAAA,G;UAApBlB,oBAAoB;IAAAmB,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,8BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCVjCV,EAAA,CAAAY,cAAA,QAAG;QAAAZ,EAAA,CAAAa,MAAA,0BAAmB;QAAAb,EAAA,CAAAc,YAAA,EAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}