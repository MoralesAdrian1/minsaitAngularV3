{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DatosExperienciaService {\n  constructor(http) {\n    this.http = http;\n    this.domain = \"http://localhost:3000\";\n  }\n  getDatosEx() {\n    return this.http.get(`${this.domain}/api/datosEx`).pipe(map(res => res.map(item => this.parseDatosExModel(item))));\n  }\n  addDatosEx(newDatosEx) {\n    return this.http.post(`${this.domain}/api/datosEx`, newDatosEx).pipe(map(res => this.parseDatosExModel(res)));\n  }\n  deleteDatosEx(id) {\n    return this.http.delete(`${this.domain}/api/datosEx/${id}`).pipe(map(res => this.parseDatosExModel(res)));\n  }\n  updateDatosEx(newDatosEx) {\n    return this.http.put(`${this.domain}/api/datosEx/${newDatosEx._id}`, newDatosEx).pipe(map(res => this.parseDatosExModel(res)));\n  }\n  // Método para convertir la respuesta del servidor al tipo DatosLModel\n  parseDatosExModel(data) {\n    // Aquí puedes implementar la lógica necesaria para convertir la respuesta del servidor al tipo DatosLModel\n    return data;\n  }\n  static #_ = this.ɵfac = function DatosExperienciaService_Factory(t) {\n    return new (t || DatosExperienciaService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DatosExperienciaService,\n    factory: DatosExperienciaService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","DatosExperienciaService","constructor","http","domain","getDatosEx","get","pipe","res","item","parseDatosExModel","addDatosEx","newDatosEx","post","deleteDatosEx","id","delete","updateDatosEx","put","_id","data","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Lexag\\Desktop\\minsaitAngularV2\\src\\client\\src\\app\\services\\datos-experiencia.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { DatosExModel } from '../models/datosExperienciaModel';\r\nimport { map } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DatosExperienciaService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n  domain: string = \"http://localhost:3000\";\r\n\r\n  getDatosEx() {\r\n    return this.http.get<DatosExModel[]>(`${this.domain}/api/datosEx`).pipe(\r\n      map(res => res.map(item => this.parseDatosExModel(item)))\r\n    );\r\n  }\r\n\r\n  addDatosEx(newDatosEx: DatosExModel) {\r\n    return this.http.post<DatosExModel>(`${this.domain}/api/datosEx`, newDatosEx).pipe(\r\n      map(res => this.parseDatosExModel(res))\r\n    );\r\n  }\r\n\r\n  deleteDatosEx(id: string) {\r\n    return this.http.delete<DatosExModel>(`${this.domain}/api/datosEx/${id}`).pipe(\r\n      map(res => this.parseDatosExModel(res))\r\n    );\r\n  }\r\n\r\n  updateDatosEx(newDatosEx: DatosExModel) {\r\n    return this.http.put<DatosExModel>(`${this.domain}/api/datosEx/${newDatosEx._id}`, newDatosEx).pipe(\r\n      map(res => this.parseDatosExModel(res))\r\n    );\r\n  }\r\n\r\n  // Método para convertir la respuesta del servidor al tipo DatosLModel\r\n  private parseDatosExModel(data: any): DatosExModel {\r\n    // Aquí puedes implementar la lógica necesaria para convertir la respuesta del servidor al tipo DatosLModel\r\n    return data as DatosExModel;\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,MAAM;;;AAK1B,OAAM,MAAOC,uBAAuB;EAElCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IACxB,KAAAC,MAAM,GAAW,uBAAuB;EADA;EAGxCC,UAAUA,CAAA;IACR,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAiB,GAAG,IAAI,CAACF,MAAM,cAAc,CAAC,CAACG,IAAI,CACrEP,GAAG,CAACQ,GAAG,IAAIA,GAAG,CAACR,GAAG,CAACS,IAAI,IAAI,IAAI,CAACC,iBAAiB,CAACD,IAAI,CAAC,CAAC,CAAC,CAC1D;EACH;EAEAE,UAAUA,CAACC,UAAwB;IACjC,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAe,GAAG,IAAI,CAACT,MAAM,cAAc,EAAEQ,UAAU,CAAC,CAACL,IAAI,CAChFP,GAAG,CAACQ,GAAG,IAAI,IAAI,CAACE,iBAAiB,CAACF,GAAG,CAAC,CAAC,CACxC;EACH;EAEAM,aAAaA,CAACC,EAAU;IACtB,OAAO,IAAI,CAACZ,IAAI,CAACa,MAAM,CAAe,GAAG,IAAI,CAACZ,MAAM,gBAAgBW,EAAE,EAAE,CAAC,CAACR,IAAI,CAC5EP,GAAG,CAACQ,GAAG,IAAI,IAAI,CAACE,iBAAiB,CAACF,GAAG,CAAC,CAAC,CACxC;EACH;EAEAS,aAAaA,CAACL,UAAwB;IACpC,OAAO,IAAI,CAACT,IAAI,CAACe,GAAG,CAAe,GAAG,IAAI,CAACd,MAAM,gBAAgBQ,UAAU,CAACO,GAAG,EAAE,EAAEP,UAAU,CAAC,CAACL,IAAI,CACjGP,GAAG,CAACQ,GAAG,IAAI,IAAI,CAACE,iBAAiB,CAACF,GAAG,CAAC,CAAC,CACxC;EACH;EAEA;EACQE,iBAAiBA,CAACU,IAAS;IACjC;IACA,OAAOA,IAAoB;EAC7B;EAAC,QAAAC,CAAA,G;qBAjCUpB,uBAAuB,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAvBzB,uBAAuB;IAAA0B,OAAA,EAAvB1B,uBAAuB,CAAA2B,IAAA;IAAAC,UAAA,EAFtB;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}