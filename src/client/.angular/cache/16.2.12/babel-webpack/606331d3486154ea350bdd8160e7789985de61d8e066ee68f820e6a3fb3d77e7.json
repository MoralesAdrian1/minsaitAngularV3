{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/datos-l.service\";\nimport * as i2 from \"@angular/forms\";\nexport class DatosLComponent {\n  constructor(datosLService, fb) {\n    this.datosLService = datosLService;\n    this.fb = fb;\n    this.datosL = [];\n    this.lenguajesProgramacionDisponibles = [\"JavaScript\", \"Java\", \"Python\", \"JSX\", \"Kotlin\"];\n    this.tecnologiasDisponibles = [\"Angular\", \"SpringBoot 5\", \"React\"];\n    this.idiomasDisponibles = [\"Inglés\", \"Francés\"];\n    this.datosLForm = this.fb.group({\n      _id: [''],\n      puestoPostulante: [\"\", Validators.required],\n      lenguajeProgramacion: [[]],\n      tecnologias: [[]],\n      yearsExperiencia: [0, Validators.required],\n      idiomas: this.fb.array([]),\n      certificaciones: this.fb.array([])\n    });\n  }\n  ngOnInit() {\n    this.cargarDatosL();\n  }\n  cargarDatosL() {\n    this.datosLService.getDatosL().subscribe(data => {\n      this.datosL = data;\n    }, error => {\n      console.error('Error al cargar datosL:', error);\n    });\n  }\n  agregarDatosL() {\n    if (this.datosLForm.valid) {\n      const nuevoDatosL = this.datosLForm.value;\n      this.datosLService.addDatosL(nuevoDatosL).subscribe(() => {\n        this.cargarDatosL();\n        this.datosLForm.reset();\n      }, error => {\n        console.error('Error al agregar datosL', error);\n      });\n    }\n  }\n  actualizarDatosL() {\n    if (this.datosLForm.valid) {\n      const DatosLActualizado = this.datosLForm.value;\n      this.datosLService.updateDatosL(DatosLActualizado).subscribe(() => {\n        this.cargarDatosL();\n        this.datosLForm.reset();\n      }, error => {\n        console.error('Error al actualizar datosL:', error);\n      });\n    }\n  }\n  eliminarDatosL(id) {\n    if (id) {\n      this.datosLService.deleteDatosL(id).subscribe(data => {\n        console.log('datosL eliminado:', data);\n        this.cargarDatosL();\n      }, error => {\n        console.error('Error al eliminar datosL:', error);\n      });\n    }\n  }\n  editarDatosL(datosL) {\n    this.datosLForm.patchValue(datosL);\n  }\n  //certificacciones\n  agregarCertificacion() {\n    const certificacionGroup = this.fb.group({\n      nombre: ['', Validators.required],\n      archivo: [null] // Hacer el archivo opcional\n    });\n\n    this.certificaciones.push(certificacionGroup);\n  }\n  get certificaciones() {\n    return this.datosLForm.get('certificaciones');\n  }\n  manejarArchivoInput(event, index) {\n    const archivo = event.target.files[0];\n    this.certificaciones.at(index).get('archivo').setValue(archivo);\n  }\n  //idiomas\n  agregarIdioma() {\n    const idiomaGroup = this.fb.group({\n      nombreIdioma: ['', Validators.required],\n      nivel: ['', Validators.required]\n    });\n    this.idiomas.push(idiomaGroup);\n  }\n  get idiomas() {\n    return this.datosLForm.get('idiomas');\n  }\n  static #_ = this.ɵfac = function DatosLComponent_Factory(t) {\n    return new (t || DatosLComponent)(i0.ɵɵdirectiveInject(i1.DatosLService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DatosLComponent,\n    selectors: [[\"app-datos-l\"]],\n    decls: 0,\n    vars: 0,\n    template: function DatosLComponent_Template(rf, ctx) {},\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","DatosLComponent","constructor","datosLService","fb","datosL","lenguajesProgramacionDisponibles","tecnologiasDisponibles","idiomasDisponibles","datosLForm","group","_id","puestoPostulante","required","lenguajeProgramacion","tecnologias","yearsExperiencia","idiomas","array","certificaciones","ngOnInit","cargarDatosL","getDatosL","subscribe","data","error","console","agregarDatosL","valid","nuevoDatosL","value","addDatosL","reset","actualizarDatosL","DatosLActualizado","updateDatosL","eliminarDatosL","id","deleteDatosL","log","editarDatosL","patchValue","agregarCertificacion","certificacionGroup","nombre","archivo","push","get","manejarArchivoInput","event","index","target","files","at","setValue","agregarIdioma","idiomaGroup","nombreIdioma","nivel","_","i0","ɵɵdirectiveInject","i1","DatosLService","i2","FormBuilder","_2","selectors","decls","vars","template","DatosLComponent_Template","rf","ctx","styles"],"sources":["C:\\Users\\Lexag\\Desktop\\minsaitAngularV2\\src\\client\\src\\app\\components\\datos-l\\datos-l.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { DatosLModel } from 'src/app/models/datosLModel';\r\nimport { DatosLService } from 'src/app/services/datos-l.service';\r\n\r\n@Component({\r\n  selector: 'app-datos-l',\r\n  templateUrl: './datos-l.component.html',\r\n  styleUrls: ['./datos-l.component.css']\r\n})\r\nexport class DatosLComponent implements OnInit{\r\n  datosL: DatosLModel[] = [];\r\n  datosLForm: FormGroup;\r\n\r\n  lenguajesProgramacionDisponibles: string[] = [\"JavaScript\", \"Java\", \"Python\", \"JSX\", \"Kotlin\"];\r\n  tecnologiasDisponibles: string[] = [\"Angular\", \"SpringBoot 5\", \"React\"];\r\n  idiomasDisponibles: string[] = [\"Inglés\", \"Francés\"];\r\n\r\n  constructor(private datosLService: DatosLService, private fb: FormBuilder) {\r\n    this.datosLForm = this.fb.group({\r\n      _id: [''],\r\n      puestoPostulante: [\"\", Validators.required],\r\n      lenguajeProgramacion: [[]],\r\n      tecnologias: [[]],\r\n      yearsExperiencia: [0, Validators.required],\r\n      idiomas: this.fb.array([]),\r\n      certificaciones: this.fb.array([])\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cargarDatosL();\r\n  }\r\n\r\n  cargarDatosL() {\r\n    this.datosLService.getDatosL().subscribe(\r\n      data => {\r\n        this.datosL = data;\r\n      },\r\n      error => {\r\n        console.error('Error al cargar datosL:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  agregarDatosL() {\r\n    if (this.datosLForm.valid) {\r\n      const nuevoDatosL: DatosLModel = this.datosLForm.value;\r\n      this.datosLService.addDatosL(nuevoDatosL).subscribe(\r\n        () => {\r\n          this.cargarDatosL();\r\n          this.datosLForm.reset();\r\n        },\r\n        error => {\r\n          console.error('Error al agregar datosL', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  actualizarDatosL() {\r\n    if (this.datosLForm.valid) {\r\n      const DatosLActualizado: DatosLModel = this.datosLForm.value;\r\n      this.datosLService.updateDatosL(DatosLActualizado).subscribe(\r\n        () => {\r\n          this.cargarDatosL();\r\n          this.datosLForm.reset();\r\n        },\r\n        error => {\r\n          console.error('Error al actualizar datosL:', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  eliminarDatosL(id: string | undefined) {\r\n    if (id) {\r\n      this.datosLService.deleteDatosL(id).subscribe(\r\n        data => {\r\n          console.log('datosL eliminado:', data);\r\n          this.cargarDatosL();\r\n        },\r\n        error => {\r\n          console.error('Error al eliminar datosL:', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  editarDatosL(datosL: DatosLModel) {\r\n    this.datosLForm.patchValue(datosL);\r\n  }\r\n  //certificacciones\r\n  agregarCertificacion() {\r\n  const certificacionGroup = this.fb.group({\r\n    nombre: ['', Validators.required],\r\n    archivo: [null] // Hacer el archivo opcional\r\n  });\r\n  this.certificaciones.push(certificacionGroup);\r\n}\r\n\r\n\r\n  get certificaciones() {\r\n    return this.datosLForm.get('certificaciones') as FormArray;\r\n  }\r\n\r\n  manejarArchivoInput(event: any, index: number) {\r\n    const archivo = (event.target as HTMLInputElement).files![0];\r\n    this.certificaciones.at(index).get('archivo')!.setValue(archivo);\r\n  }\r\n  //idiomas\r\n  agregarIdioma() {\r\n    const idiomaGroup = this.fb.group({\r\n      nombreIdioma: ['', Validators.required],\r\n      nivel:['', Validators.required], \r\n    });\r\n    this.idiomas.push(idiomaGroup);\r\n  }\r\n  \r\n  \r\n    get idiomas() {\r\n      return this.datosLForm.get('idiomas') as FormArray;\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}