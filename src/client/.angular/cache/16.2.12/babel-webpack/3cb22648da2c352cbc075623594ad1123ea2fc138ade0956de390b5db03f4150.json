{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PerfilAdminService {\n  constructor(http) {\n    this.http = http;\n    this.domain = \"http://localhost:3000\";\n  }\n  getPerfil() {\n    return this.http.get(`${this.domain}/api/perfil`).pipe(map(res => res.map(item => this.parsePerfilModel(item))));\n  }\n  addPerfil(newPerfil) {\n    return this.http.post(`${this.domain}/api/perfil`, this.parsePerfilData(newPerfil)).pipe(map(res => this.parsePerfilModel(res)));\n  }\n  deletePerfil(id) {\n    return this.http.delete(`${this.domain}/api/perfil/${id}`).pipe(map(res => this.parsePerfilModel(res)));\n  }\n  updatePerfil(newPerfil) {\n    return this.http.put(`${this.domain}/api/perfil/${newPerfil._id}`, this.parsePerfilData(newPerfil)).pipe(map(res => this.parsePerfilModel(res)));\n  }\n  // Método para convertir datos del PerfilModel a formato adecuado para enviar al servidor\n  parsePerfilData(perfil) {\n    return {\n      puesto: perfil.puesto,\n      habilidades: perfil.habilidades,\n      Sos: perfil.Sos,\n      experiencia: perfil.experiencia,\n      idiomas: perfil.idiomas,\n      certificaciones: perfil.certificaciones\n    };\n  }\n  // Método para convertir la respuesta del servidor al tipo PerfilModel\n  parsePerfilModel(data) {\n    return {\n      _id: data._id,\n      puesto: data.puesto,\n      habilidades: data.habilidades,\n      Sos: data.Sos,\n      experiencia: data.experiencia,\n      idiomas: data.idiomas,\n      certificaciones: data.certificaciones,\n      isDone: data.isDone,\n      n: data.n\n    };\n  }\n  static #_ = this.ɵfac = function PerfilAdminService_Factory(t) {\n    return new (t || PerfilAdminService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PerfilAdminService,\n    factory: PerfilAdminService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","PerfilAdminService","constructor","http","domain","getPerfil","get","pipe","res","item","parsePerfilModel","addPerfil","newPerfil","post","parsePerfilData","deletePerfil","id","delete","updatePerfil","put","_id","perfil","puesto","habilidades","Sos","experiencia","idiomas","certificaciones","data","isDone","n","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Lexag\\Desktop\\minsaitAngularV2\\src\\client\\src\\app\\services\\perfil-admin.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { PerfilModel } from '../models/perfilModel';\r\nimport { map } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PerfilAdminService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n  domain: string = \"http://localhost:3000\";\r\n\r\n  getPerfil() {\r\n    return this.http.get<any[]>(`${this.domain}/api/perfil`).pipe(\r\n      map(res => res.map(item => this.parsePerfilModel(item)))\r\n    );\r\n  }\r\n\r\n  addPerfil(newPerfil: PerfilModel) {\r\n    return this.http.post<any>(`${this.domain}/api/perfil`, this.parsePerfilData(newPerfil)).pipe(\r\n      map(res => this.parsePerfilModel(res))\r\n    );\r\n  }\r\n\r\n  deletePerfil(id: string) {\r\n    return this.http.delete<any>(`${this.domain}/api/perfil/${id}`).pipe(\r\n      map(res => this.parsePerfilModel(res))\r\n    );\r\n  }\r\n\r\n  updatePerfil(newPerfil: PerfilModel) {\r\n    return this.http.put<any>(`${this.domain}/api/perfil/${newPerfil._id}`, this.parsePerfilData(newPerfil)).pipe(\r\n      map(res => this.parsePerfilModel(res))\r\n    );\r\n  }\r\n\r\n  // Método para convertir datos del PerfilModel a formato adecuado para enviar al servidor\r\n  private parsePerfilData(perfil: PerfilModel): any {\r\n    return {\r\n      puesto: perfil.puesto,\r\n      habilidades: perfil.habilidades,\r\n      Sos: perfil.Sos,\r\n      experiencia: perfil.experiencia,\r\n      idiomas: perfil.idiomas,\r\n      certificaciones: perfil.certificaciones\r\n    };\r\n  }\r\n\r\n  // Método para convertir la respuesta del servidor al tipo PerfilModel\r\n  private parsePerfilModel(data: any): PerfilModel {\r\n    return {\r\n      _id: data._id,\r\n      puesto: data.puesto,\r\n      habilidades: data.habilidades,\r\n      Sos: data.Sos,\r\n      experiencia: data.experiencia,\r\n      idiomas: data.idiomas,\r\n      certificaciones: data.certificaciones,\r\n      isDone: data.isDone,\r\n      n: data.n\r\n    };\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,kBAAkB;EAE7BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IACxB,KAAAC,MAAM,GAAW,uBAAuB;EADA;EAGxCC,SAASA,CAAA;IACP,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAQ,GAAG,IAAI,CAACF,MAAM,aAAa,CAAC,CAACG,IAAI,CAC3DP,GAAG,CAACQ,GAAG,IAAIA,GAAG,CAACR,GAAG,CAACS,IAAI,IAAI,IAAI,CAACC,gBAAgB,CAACD,IAAI,CAAC,CAAC,CAAC,CACzD;EACH;EAEAE,SAASA,CAACC,SAAsB;IAC9B,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAM,GAAG,IAAI,CAACT,MAAM,aAAa,EAAE,IAAI,CAACU,eAAe,CAACF,SAAS,CAAC,CAAC,CAACL,IAAI,CAC3FP,GAAG,CAACQ,GAAG,IAAI,IAAI,CAACE,gBAAgB,CAACF,GAAG,CAAC,CAAC,CACvC;EACH;EAEAO,YAAYA,CAACC,EAAU;IACrB,OAAO,IAAI,CAACb,IAAI,CAACc,MAAM,CAAM,GAAG,IAAI,CAACb,MAAM,eAAeY,EAAE,EAAE,CAAC,CAACT,IAAI,CAClEP,GAAG,CAACQ,GAAG,IAAI,IAAI,CAACE,gBAAgB,CAACF,GAAG,CAAC,CAAC,CACvC;EACH;EAEAU,YAAYA,CAACN,SAAsB;IACjC,OAAO,IAAI,CAACT,IAAI,CAACgB,GAAG,CAAM,GAAG,IAAI,CAACf,MAAM,eAAeQ,SAAS,CAACQ,GAAG,EAAE,EAAE,IAAI,CAACN,eAAe,CAACF,SAAS,CAAC,CAAC,CAACL,IAAI,CAC3GP,GAAG,CAACQ,GAAG,IAAI,IAAI,CAACE,gBAAgB,CAACF,GAAG,CAAC,CAAC,CACvC;EACH;EAEA;EACQM,eAAeA,CAACO,MAAmB;IACzC,OAAO;MACLC,MAAM,EAAED,MAAM,CAACC,MAAM;MACrBC,WAAW,EAAEF,MAAM,CAACE,WAAW;MAC/BC,GAAG,EAAEH,MAAM,CAACG,GAAG;MACfC,WAAW,EAAEJ,MAAM,CAACI,WAAW;MAC/BC,OAAO,EAAEL,MAAM,CAACK,OAAO;MACvBC,eAAe,EAAEN,MAAM,CAACM;KACzB;EACH;EAEA;EACQjB,gBAAgBA,CAACkB,IAAS;IAChC,OAAO;MACLR,GAAG,EAAEQ,IAAI,CAACR,GAAG;MACbE,MAAM,EAAEM,IAAI,CAACN,MAAM;MACnBC,WAAW,EAAEK,IAAI,CAACL,WAAW;MAC7BC,GAAG,EAAEI,IAAI,CAACJ,GAAG;MACbC,WAAW,EAAEG,IAAI,CAACH,WAAW;MAC7BC,OAAO,EAAEE,IAAI,CAACF,OAAO;MACrBC,eAAe,EAAEC,IAAI,CAACD,eAAe;MACrCE,MAAM,EAAED,IAAI,CAACC,MAAM;MACnBC,CAAC,EAAEF,IAAI,CAACE;KACT;EACH;EAAC,QAAAC,CAAA,G;qBAtDU9B,kBAAkB,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlBnC,kBAAkB;IAAAoC,OAAA,EAAlBpC,kBAAkB,CAAAqC,IAAA;IAAAC,UAAA,EAFjB;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}