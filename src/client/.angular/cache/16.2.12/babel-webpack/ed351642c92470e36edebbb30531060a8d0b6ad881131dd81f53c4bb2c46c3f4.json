{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/datos-estudios.service\";\nimport * as i2 from \"@angular/forms\";\nexport class DatosEstudiosComponent {\n  constructor(datosEsService, fb) {\n    this.datosEsService = datosEsService;\n    this.fb = fb;\n    this.datosEs = [];\n    this.datosEsForm = this.fb.group({\n      _id: [''],\n      username: [\"\", Validators.required],\n      datosAcademicos: this.fb.array([])\n    });\n  }\n  ngOnInit() {\n    this.cargarDatosEs();\n  }\n  cargarDatosEs() {\n    this.datosEsService.getDatosEstudios().subscribe(data => {\n      this.datosEs = data;\n    }, error => {\n      console.error('Error al cargar datosL:', error);\n    });\n  }\n  agregarDatosEx() {\n    if (this.datosEsForm.valid) {\n      const nuevoDatosEs = this.datosEsForm.value;\n      this.datosEsService.addDatosEstudios(nuevoDatosEs).subscribe(() => {\n        this.cargarDatosEs();\n        this.datosEsForm.reset();\n      }, error => {\n        console.error('Error al agregar daotsEx', error);\n      });\n    }\n  }\n  actualizarDatosEs() {\n    if (this.datosEsForm.valid) {\n      const datosEsId = this.datosEsForm.get('_id')?.value; // Obtener el ID del dato de experiencia\n      const datosEsActualizado = this.datosEsForm.value; // Obtener los datos actualizados del formulario\n      // Agregar el ID al objeto actualizado\n      datosEsActualizado._id = datosEsId;\n      this.datosEsService.updateDatosEstudios(datosEsActualizado).subscribe(() => {\n        this.cargarDatosEs();\n        this.datosEsForm.reset();\n      }, error => {\n        console.error('Error al actualizar DatosEs:', error);\n      });\n    }\n  }\n  eliminarDatosEs(id) {\n    if (id) {\n      this.datosEsService.deleteDatosEstudios(id).subscribe(data => {\n        console.log('datosEx eliminado:', data);\n        this.cargarDatosEs();\n      }, error => {\n        console.error('Error al eliminar datosL:', error);\n      });\n    }\n  }\n  editarDatosEs(datosEs) {\n    this.datosEsForm.patchValue(datosEs);\n  }\n  //Datos Titulo\n  agregarTitulo() {\n    const datosAcademicosGroup = this.fb.group({\n      nombreUniv: ['', Validators.required],\n      titulo: ['', Validators.required],\n      fechaInicio: ['', Validators.required],\n      fechaFin: ['', Validators.required]\n    });\n    this.datosAcademicos.push(datosAcademicosGroup);\n  }\n  get datosAcademicos() {\n    return this.datosEsForm.get('datosAcademicos');\n  }\n  static #_ = this.ɵfac = function DatosEstudiosComponent_Factory(t) {\n    return new (t || DatosEstudiosComponent)(i0.ɵɵdirectiveInject(i1.DatosEstudiosService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DatosEstudiosComponent,\n    selectors: [[\"app-datos-estudios\"]],\n    decls: 2,\n    vars: 0,\n    template: function DatosEstudiosComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"datos-estudios works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","DatosEstudiosComponent","constructor","datosEsService","fb","datosEs","datosEsForm","group","_id","username","required","datosAcademicos","array","ngOnInit","cargarDatosEs","getDatosEstudios","subscribe","data","error","console","agregarDatosEx","valid","nuevoDatosEs","value","addDatosEstudios","reset","actualizarDatosEs","datosEsId","get","datosEsActualizado","updateDatosEstudios","eliminarDatosEs","id","deleteDatosEstudios","log","editarDatosEs","patchValue","agregarTitulo","datosAcademicosGroup","nombreUniv","titulo","fechaInicio","fechaFin","push","_","i0","ɵɵdirectiveInject","i1","DatosEstudiosService","i2","FormBuilder","_2","selectors","decls","vars","template","DatosEstudiosComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\Lexag\\Desktop\\minsaitAngularV2\\src\\client\\src\\app\\components\\datos-estudios\\datos-estudios.component.ts","C:\\Users\\Lexag\\Desktop\\minsaitAngularV2\\src\\client\\src\\app\\components\\datos-estudios\\datos-estudios.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { DatosEstudioModel } from 'src/app/models/datosEstudioModel';\r\nimport { DatosEstudiosService } from 'src/app/services/datos-estudios.service';\r\n\r\n@Component({\r\n  selector: 'app-datos-estudios',\r\n  templateUrl: './datos-estudios.component.html',\r\n  styleUrls: ['./datos-estudios.component.css']\r\n})\r\nexport class DatosEstudiosComponent {\r\n  datosEs: DatosEstudioModel[] = [];\r\n  datosEsForm: FormGroup;\r\n\r\n\r\n  constructor(private datosEsService: DatosEstudiosService, private fb: FormBuilder) {\r\n    this.datosEsForm = this.fb.group({\r\n      _id: [''],\r\n      username: [\"\", Validators.required],\r\n      datosAcademicos: this.fb.array([])\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cargarDatosEs();\r\n  }\r\n\r\n  cargarDatosEs() {\r\n    this.datosEsService.getDatosEstudios().subscribe(\r\n      data => {\r\n        this.datosEs = data;\r\n      },\r\n      error => {\r\n        console.error('Error al cargar datosL:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  agregarDatosEx() {\r\n    if (this.datosEsForm.valid) {\r\n      const nuevoDatosEs: DatosEstudioModel = this.datosEsForm.value;\r\n      this.datosEsService.addDatosEstudios(nuevoDatosEs).subscribe(\r\n        () => {\r\n          this.cargarDatosEs();\r\n          this.datosEsForm.reset();\r\n        },\r\n        error => {\r\n          console.error('Error al agregar daotsEx', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  actualizarDatosEs() {\r\n    if (this.datosEsForm.valid) {\r\n      const datosEsId = this.datosEsForm.get('_id')?.value; // Obtener el ID del dato de experiencia\r\n      const datosEsActualizado: DatosEstudioModel = this.datosEsForm.value; // Obtener los datos actualizados del formulario\r\n  \r\n      // Agregar el ID al objeto actualizado\r\n      datosEsActualizado._id = datosEsId;\r\n  \r\n      this.datosEsService.updateDatosEstudios(datosEsActualizado).subscribe(\r\n        () => {\r\n          this.cargarDatosEs();\r\n          this.datosEsForm.reset();\r\n        },\r\n        error => {\r\n          console.error('Error al actualizar DatosEs:', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n  \r\n  \r\n  \r\n  \r\n\r\n  eliminarDatosEs(id: string | undefined) {\r\n    if (id) {\r\n      this.datosEsService.deleteDatosEstudios(id).subscribe(\r\n        data => {\r\n          console.log('datosEx eliminado:', data);\r\n          this.cargarDatosEs();\r\n        },\r\n        error => {\r\n          console.error('Error al eliminar datosL:', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  editarDatosEs(datosEs: DatosEstudioModel) {\r\n    this.datosEsForm.patchValue(datosEs);\r\n  }\r\n  //Datos Titulo\r\n  agregarTitulo() {\r\n    const datosAcademicosGroup = this.fb.group({\r\n      nombreUniv: ['', Validators.required],\r\n      titulo:['', Validators.required],\r\n      fechaInicio:['', Validators.required],\r\n      fechaFin:['', Validators.required], \r\n    });\r\n    this.datosAcademicos.push(datosAcademicosGroup);\r\n  }\r\n  \r\n  \r\n    get datosAcademicos() {\r\n      return this.datosEsForm.get('datosAcademicos') as FormArray;\r\n    }\r\n}\r\n","<p>datos-estudios works!</p>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}