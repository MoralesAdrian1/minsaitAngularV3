{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DatosLService {\n  constructor(http) {\n    this.http = http;\n    this.domain = \"http://localhost:3000\";\n  }\n  getDatosL() {\n    return this.http.get(`${this.domain}/api/datosL`).pipe(map(res => res.map(item => this.parseDatosLModel(item))));\n  }\n  addDatosL(newDatosl) {\n    return this.http.post(`${this.domain}/api/datosL`, newDatosl).pipe(map(res => this.parseDatosLModel(res)));\n  }\n  deleteDatosL(id) {\n    return this.http.delete(`${this.domain}/api/datosL/${id}`).pipe(map(res => this.parseDatosLModel(res)));\n  }\n  updateDatosL(newDatosl) {\n    return this.http.put(`${this.domain}/api/datosL/${newDatosl._id}`, newDatosl).pipe(map(res => this.parseDatosLModel(res)));\n  }\n  // Método para convertir la respuesta del servidor al tipo DatosLModel\n  parseDatosLModel(data) {\n    // Aquí puedes implementar la lógica necesaria para convertir la respuesta del servidor al tipo DatosLModel\n    return data;\n  }\n  static #_ = this.ɵfac = function DatosLService_Factory(t) {\n    return new (t || DatosLService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DatosLService,\n    factory: DatosLService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","DatosLService","constructor","http","domain","getDatosL","get","pipe","res","item","parseDatosLModel","addDatosL","newDatosl","post","deleteDatosL","id","delete","updateDatosL","put","_id","data","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Lexag\\Desktop\\minsaitAngularV2\\src\\client\\src\\app\\services\\datos-l.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { DatosLModel } from '../models/datosLModel';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DatosLService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n  domain: string = \"http://localhost:3000\";\r\n\r\n  getDatosL() {\r\n    return this.http.get<DatosLModel[]>(`${this.domain}/api/datosL`).pipe(\r\n      map(res => res.map(item => this.parseDatosLModel(item)))\r\n    );\r\n  }\r\n\r\n  addDatosL(newDatosl: DatosLModel) {\r\n    return this.http.post<DatosLModel>(`${this.domain}/api/datosL`, newDatosl).pipe(\r\n      map(res => this.parseDatosLModel(res))\r\n    );\r\n  }\r\n\r\n  deleteDatosL(id: string) {\r\n    return this.http.delete<DatosLModel>(`${this.domain}/api/datosL/${id}`).pipe(\r\n      map(res => this.parseDatosLModel(res))\r\n    );\r\n  }\r\n\r\n  updateDatosL(newDatosl: DatosLModel) {\r\n    return this.http.put<DatosLModel>(`${this.domain}/api/datosL/${newDatosl._id}`, newDatosl).pipe(\r\n      map(res => this.parseDatosLModel(res))\r\n    );\r\n  }\r\n\r\n  // Método para convertir la respuesta del servidor al tipo DatosLModel\r\n  private parseDatosLModel(data: any): DatosLModel {\r\n    // Aquí puedes implementar la lógica necesaria para convertir la respuesta del servidor al tipo DatosLModel\r\n    return data as DatosLModel;\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,GAAG,QAAQ,MAAM;;;AAM1B,OAAM,MAAOC,aAAa;EAExBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IACxB,KAAAC,MAAM,GAAW,uBAAuB;EADA;EAGxCC,SAASA,CAAA;IACP,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAgB,GAAG,IAAI,CAACF,MAAM,aAAa,CAAC,CAACG,IAAI,CACnEP,GAAG,CAACQ,GAAG,IAAIA,GAAG,CAACR,GAAG,CAACS,IAAI,IAAI,IAAI,CAACC,gBAAgB,CAACD,IAAI,CAAC,CAAC,CAAC,CACzD;EACH;EAEAE,SAASA,CAACC,SAAsB;IAC9B,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAc,GAAG,IAAI,CAACT,MAAM,aAAa,EAAEQ,SAAS,CAAC,CAACL,IAAI,CAC7EP,GAAG,CAACQ,GAAG,IAAI,IAAI,CAACE,gBAAgB,CAACF,GAAG,CAAC,CAAC,CACvC;EACH;EAEAM,YAAYA,CAACC,EAAU;IACrB,OAAO,IAAI,CAACZ,IAAI,CAACa,MAAM,CAAc,GAAG,IAAI,CAACZ,MAAM,eAAeW,EAAE,EAAE,CAAC,CAACR,IAAI,CAC1EP,GAAG,CAACQ,GAAG,IAAI,IAAI,CAACE,gBAAgB,CAACF,GAAG,CAAC,CAAC,CACvC;EACH;EAEAS,YAAYA,CAACL,SAAsB;IACjC,OAAO,IAAI,CAACT,IAAI,CAACe,GAAG,CAAc,GAAG,IAAI,CAACd,MAAM,eAAeQ,SAAS,CAACO,GAAG,EAAE,EAAEP,SAAS,CAAC,CAACL,IAAI,CAC7FP,GAAG,CAACQ,GAAG,IAAI,IAAI,CAACE,gBAAgB,CAACF,GAAG,CAAC,CAAC,CACvC;EACH;EAEA;EACQE,gBAAgBA,CAACU,IAAS;IAChC;IACA,OAAOA,IAAmB;EAC5B;EAAC,QAAAC,CAAA,G;qBAjCUpB,aAAa,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAbzB,aAAa;IAAA0B,OAAA,EAAb1B,aAAa,CAAA2B,IAAA;IAAAC,UAAA,EAFZ;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}