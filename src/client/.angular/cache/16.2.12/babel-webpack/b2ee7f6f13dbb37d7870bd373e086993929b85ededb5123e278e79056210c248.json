{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/ciudad.service\";\nimport * as i2 from \"@angular/forms\";\nexport class CiudadComponent {\n  constructor(ciudadService, fb) {\n    this.ciudadService = ciudadService;\n    this.fb = fb;\n    this.ciudad = [];\n    this.ciudadForm = this.fb.group({\n      _id: [''],\n      nombrePais: [\"\", Validators.required],\n      nombreEstado: [\"\", Validators.required],\n      nombreCiudad: [\"\", Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.cargarCiudad();\n  }\n  cargarCiudad() {\n    this.ciudadService.getCiudad().subscribe(data => {\n      this.ciudad = data;\n    }, error => {\n      console.error('Error al cargar datos Personales:', error);\n    });\n  }\n  agregarCiudad() {\n    if (this.ciudadForm.valid) {\n      this.ciudadService.addCiudad(this.ciudadForm.value).subscribe(() => {\n        this.cargarCiudad();\n        this.ciudadForm.reset();\n      }, error => {\n        console.error('Error al agregar ciudad:', error);\n      });\n    }\n  }\n  actualizarCiudad() {\n    if (this.ciudadForm.valid) {\n      this.ciudadService.updateCiudad(this.ciudadForm.value).subscribe(() => {\n        this.cargarCiudad();\n        this.ciudadForm.reset();\n      }, error => {\n        console.error('Error al actualizar Ciudades:', error);\n      });\n    }\n  }\n  eliminarCiudad(id) {\n    if (id) {\n      this.ciudadService.deleteCiudad(id).subscribe(data => {\n        console.log('ciudad eliminado:', data);\n        this.cargarCiudad();\n      }, error => {\n        console.error('Error al eliminar ciudad:', error);\n      });\n    }\n  }\n  editarCiudad(ciudad) {\n    this.ciudadForm.patchValue(ciudad);\n  }\n  static #_ = this.ɵfac = function CiudadComponent_Factory(t) {\n    return new (t || CiudadComponent)(i0.ɵɵdirectiveInject(i1.CiudadService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CiudadComponent,\n    selectors: [[\"app-ciudad\"]],\n    decls: 2,\n    vars: 0,\n    template: function CiudadComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"ciudad works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","CiudadComponent","constructor","ciudadService","fb","ciudad","ciudadForm","group","_id","nombrePais","required","nombreEstado","nombreCiudad","ngOnInit","cargarCiudad","getCiudad","subscribe","data","error","console","agregarCiudad","valid","addCiudad","value","reset","actualizarCiudad","updateCiudad","eliminarCiudad","id","deleteCiudad","log","editarCiudad","patchValue","_","i0","ɵɵdirectiveInject","i1","CiudadService","i2","FormBuilder","_2","selectors","decls","vars","template","CiudadComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\Lexag\\Desktop\\minsaitAngular\\src\\client\\src\\app\\components\\ciudad\\ciudad.component.ts","C:\\Users\\Lexag\\Desktop\\minsaitAngular\\src\\client\\src\\app\\components\\ciudad\\ciudad.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CiudadModel } from 'src/app/models/ciudadModel';\nimport { CiudadService } from 'src/app/services/ciudad.service';\n\n@Component({\n  selector: 'app-ciudad',\n  templateUrl: './ciudad.component.html',\n  styleUrls: ['./ciudad.component.css']\n})\nexport class CiudadComponent implements OnInit{\n  ciudad: CiudadModel[] = [];\n  ciudadForm: FormGroup;\n\n  constructor(private ciudadService: CiudadService, private fb: FormBuilder) {\n    this.ciudadForm = this.fb.group({\n      _id: [''],\n      nombrePais: [\"\", Validators.required],\n      nombreEstado: [\"\", Validators.required],\n      nombreCiudad: [\"\", Validators.required]\n    });\n  }\n\n  ngOnInit() {\n    this.cargarCiudad();\n  }\n\n  cargarCiudad() {\n    this.ciudadService.getCiudad().subscribe(\n      data => {\n        this.ciudad = data;\n      },\n      error => {\n        console.error('Error al cargar datos Personales:', error);\n      }\n    );\n  }\n\n  agregarCiudad() {\n    if (this.ciudadForm.valid) {\n      this.ciudadService.addCiudad(this.ciudadForm.value).subscribe(\n        () => {\n          this.cargarCiudad();\n          this.ciudadForm.reset();\n        },\n        error => {\n          console.error('Error al agregar ciudad:', error);\n        }\n      );\n    }\n  }\n\n  actualizarCiudad() {\n    if (this.ciudadForm.valid) {\n      this.ciudadService.updateCiudad(this.ciudadForm.value).subscribe(\n        () => {\n          this.cargarCiudad();\n          this.ciudadForm.reset();\n        },\n        error => {\n          console.error('Error al actualizar Ciudades:', error);\n        }\n      );\n    }\n  }\n\n  eliminarCiudad(id: string | undefined) {\n    if (id) {\n      this.ciudadService.deleteCiudad(id).subscribe(\n        data => {\n          console.log('ciudad eliminado:', data);\n          this.cargarCiudad();\n        },\n        error => {\n          console.error('Error al eliminar ciudad:', error);\n        }\n      );\n    }\n  }\n\n  editarCiudad(ciudad: CiudadModel) {\n    this.ciudadForm.patchValue(ciudad);\n  }\n}\n","<p>ciudad works!</p>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}