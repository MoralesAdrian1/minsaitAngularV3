{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/datos-experiencia.service\";\nimport * as i2 from \"@angular/forms\";\nexport class DatosExperienciaComponent {\n  constructor(datosExService, fb) {\n    this.datosExService = datosExService;\n    this.fb = fb;\n    this.datosEx = [];\n    this.datosExForm = this.fb.group({\n      _id: [''],\n      username: [\"\", Validators.required],\n      datosEmpresa: this.fb.array([])\n    });\n  }\n  ngOnInit() {\n    this.cargarDatosEx();\n  }\n  cargarDatosEx() {\n    this.datosExService.getDatosEx().subscribe(data => {\n      this.datosEx = data;\n    }, error => {\n      console.error('Error al cargar datosL:', error);\n    });\n  }\n  agregarDatosEx() {\n    if (this.datosExForm.valid) {\n      const nuevoDatosEx = this.datosExForm.value;\n      this.datosExService.addDatosEx(nuevoDatosEx).subscribe(() => {\n        this.cargarDatosEx();\n        this.datosExForm.reset();\n      }, error => {\n        console.error('Error al agregar daotsEx', error);\n      });\n    }\n  }\n  actualizarDatosEx() {\n    if (this.datosExForm.valid) {\n      const DatosExActualizado = this.datosExForm.value;\n      this.datosExService.updateDatosEx(DatosExActualizado).subscribe(() => {\n        this.cargarDatosEx();\n        this.datosExForm.reset();\n      }, error => {\n        console.error('Error al actualizar DatosEx:', error);\n      });\n    }\n  }\n  eliminarDatosEx(id) {\n    if (id) {\n      this.datosExService.deleteDatosEx(id).subscribe(data => {\n        console.log('datosEx eliminado:', data);\n        this.cargarDatosEx();\n      }, error => {\n        console.error('Error al eliminar datosL:', error);\n      });\n    }\n  }\n  editarDatosEx(datosL) {\n    this.datosExForm.patchValue(datosL);\n  }\n  //Datos Empresa\n  agregarEmpresa() {\n    const idiomaGroup = this.fb.group({\n      nombreEmpresa: ['', Validators.required],\n      puesto: ['', Validators.required],\n      fechaInicio: ['', Validators.required],\n      fechaFin: ['', Validators.required]\n    });\n    this.datosEmpresa.push(idiomaGroup);\n  }\n  get datosEmpresa() {\n    return this.datosExForm.get('datosEmpresa');\n  }\n  static #_ = this.ɵfac = function DatosExperienciaComponent_Factory(t) {\n    return new (t || DatosExperienciaComponent)(i0.ɵɵdirectiveInject(i1.DatosExperienciaService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DatosExperienciaComponent,\n    selectors: [[\"app-datos-experiencia\"]],\n    decls: 2,\n    vars: 0,\n    template: function DatosExperienciaComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"datos-experiencia works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","DatosExperienciaComponent","constructor","datosExService","fb","datosEx","datosExForm","group","_id","username","required","datosEmpresa","array","ngOnInit","cargarDatosEx","getDatosEx","subscribe","data","error","console","agregarDatosEx","valid","nuevoDatosEx","value","addDatosEx","reset","actualizarDatosEx","DatosExActualizado","updateDatosEx","eliminarDatosEx","id","deleteDatosEx","log","editarDatosEx","datosL","patchValue","agregarEmpresa","idiomaGroup","nombreEmpresa","puesto","fechaInicio","fechaFin","push","get","_","i0","ɵɵdirectiveInject","i1","DatosExperienciaService","i2","FormBuilder","_2","selectors","decls","vars","template","DatosExperienciaComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\Lexag\\Desktop\\minsaitAngularV2\\src\\client\\src\\app\\components\\datos-experiencia\\datos-experiencia.component.ts","C:\\Users\\Lexag\\Desktop\\minsaitAngularV2\\src\\client\\src\\app\\components\\datos-experiencia\\datos-experiencia.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { DatosExModel } from 'src/app/models/datosExperienciaModel';\r\nimport { DatosExperienciaService } from 'src/app/services/datos-experiencia.service';\r\n\r\n@Component({\r\n  selector: 'app-datos-experiencia',\r\n  templateUrl: './datos-experiencia.component.html',\r\n  styleUrls: ['./datos-experiencia.component.css']\r\n})\r\nexport class DatosExperienciaComponent implements OnInit {\r\n  datosEx: DatosExModel[] = [];\r\n  datosExForm: FormGroup;\r\n\r\n\r\n  constructor(private datosExService: DatosExperienciaService, private fb: FormBuilder) {\r\n    this.datosExForm = this.fb.group({\r\n      _id: [''],\r\n      username: [\"\", Validators.required],\r\n      datosEmpresa: this.fb.array([])\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cargarDatosEx();\r\n  }\r\n\r\n  cargarDatosEx() {\r\n    this.datosExService.getDatosEx().subscribe(\r\n      data => {\r\n        this.datosEx = data;\r\n      },\r\n      error => {\r\n        console.error('Error al cargar datosL:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  agregarDatosEx() {\r\n    if (this.datosExForm.valid) {\r\n      const nuevoDatosEx: DatosExModel = this.datosExForm.value;\r\n      this.datosExService.addDatosEx(nuevoDatosEx).subscribe(\r\n        () => {\r\n          this.cargarDatosEx();\r\n          this.datosExForm.reset();\r\n        },\r\n        error => {\r\n          console.error('Error al agregar daotsEx', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  actualizarDatosEx() {\r\n    if (this.datosExForm.valid) {\r\n      const DatosExActualizado: DatosExModel = this.datosExForm.value;\r\n      this.datosExService.updateDatosEx(DatosExActualizado).subscribe(\r\n        () => {\r\n          this.cargarDatosEx();\r\n          this.datosExForm.reset();\r\n        },\r\n        error => {\r\n          console.error('Error al actualizar DatosEx:', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  eliminarDatosEx(id: string | undefined) {\r\n    if (id) {\r\n      this.datosExService.deleteDatosEx(id).subscribe(\r\n        data => {\r\n          console.log('datosEx eliminado:', data);\r\n          this.cargarDatosEx();\r\n        },\r\n        error => {\r\n          console.error('Error al eliminar datosL:', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  editarDatosEx(datosL: DatosExModel) {\r\n    this.datosExForm.patchValue(datosL);\r\n  }\r\n  //Datos Empresa\r\n  agregarEmpresa() {\r\n    const idiomaGroup = this.fb.group({\r\n      nombreEmpresa: ['', Validators.required],\r\n      puesto:['', Validators.required],\r\n      fechaInicio:['', Validators.required],\r\n      fechaFin:['', Validators.required], \r\n    });\r\n    this.datosEmpresa.push(idiomaGroup);\r\n  }\r\n  \r\n  \r\n    get datosEmpresa() {\r\n      return this.datosExForm.get('datosEmpresa') as FormArray;\r\n    }\r\n}\r\n","<p>datos-experiencia works!</p>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}